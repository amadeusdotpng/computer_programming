abstract
continue
for
new
switch
assert
default
goto
package
synchronized
boolean
do
if
private
this
break
double
implements
protected
throw
byte
else
import
public
throws
case
enum
instanceof
return
transient
catch
extends
int
short
try
char
final
interface
static
void
class
finally
long
strictfp
volatile
const
float
native
super
while
alignas 
alignof 
and
and_eq
asm
atomic_cancel 
atomic_commit 
atomic_noexcept 
auto 
bitand
bitor
bool
break
case
catch
char
char8_t 
char16_t 
char32_t 
class 
compl
concept 
const
consteval 
constexpr 
constinit 
const_cast
continue
co_await 
co_return 
co_yield 
decltype 
default 
delete 
do
double
dynamic_cast
else
enum
explicit
export 
extern 
false
float
for
friend
goto
if
inline 
int
long
mutable 
namespace
new
noexcept 
not
not_eq
nullptr 
operator
or
or_eq
private
protected
public
reflexpr 
register 
reinterpret_cast
requires 
return
short
signed
sizeof 
static
static_assert 
static_cast
struct 
switch
synchronized 
template
this 
thread_local 
throw
true
try
typedef
typeid
typename
union
unsigned
using 
virtual
void
volatile
wchar_t
while
xor
xor_eq
False
None
True
and
as
assert
async
await
break
class
continue
def
del
elif
else
except
finally
for
from
global
if
import
in
is
lambda
nonlocal
not
or
pass
raise
return
try
while
with
yield
__init__
as
break
const
continue
crate
else
enum
extern
false
fn
for
if
impl
in
let
loop
match
mod
move
mut
pub
ref
return
self
Self
static
struct
super
trait
true
type
unsafe
use
where
while
async
await
dyn
abstract
become
box
do
final
macro
override
priv
typeof
unsized
virtual
yield
try
